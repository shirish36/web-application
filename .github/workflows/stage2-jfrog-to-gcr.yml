name: Stage 2 - JFrog to GCR Transfer

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag from JFrog'
        required: true
        type: string
      jfrog_image_url:
        description: 'Full JFrog image URL'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - production
          - staging
          - development
      triggered_by:
        description: 'Workflow that triggered this'
        required: false
        type: string
        default: 'manual'
      source_commit:
        description: 'Source commit SHA'
        required: false
        type: string

env:
  JFROG_DOCKER_REPO: shirish-docker
  IMAGE_NAME: web-application
  GCP_REGION: us-central1

jobs:
  transfer-jfrog-to-gcr:
    name: Transfer Image from JFrog to GCR
    runs-on: ubuntu-latest
    outputs:
      gcr_image_url: ${{ steps.transfer.outputs.gcr_image_url }}
      service_name: ${{ steps.setup.outputs.service_name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment variables
        id: setup
        run: |
          echo "service_name=${{ env.IMAGE_NAME }}-${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "gcr_image_url=gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: https://${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Pull image from JFrog Artifactory
        run: |
          echo "📥 Pulling image from JFrog Artifactory..."
          echo "Source: ${{ github.event.inputs.jfrog_image_url }}"
          
          # Pull the image from JFrog
          jf docker pull ${{ github.event.inputs.jfrog_image_url }}
          
          echo "✅ Successfully pulled from JFrog"

      - name: Transfer image to GCR
        id: transfer
        run: |
          echo "🔄 Transferring image to Google Container Registry..."
          
          GCR_IMAGE_URL="gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"
          GCR_LATEST_URL="gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.environment }}-latest"
          
          # Tag for GCR
          docker tag ${{ github.event.inputs.jfrog_image_url }} $GCR_IMAGE_URL
          docker tag ${{ github.event.inputs.jfrog_image_url }} $GCR_LATEST_URL
          
          # Push to GCR
          docker push $GCR_IMAGE_URL
          docker push $GCR_LATEST_URL
          
          echo "gcr_image_url=$GCR_IMAGE_URL" >> $GITHUB_OUTPUT
          echo "✅ Successfully pushed to GCR"
          echo "📦 GCR Image: $GCR_IMAGE_URL"

      - name: Verify image in GCR
        run: |
          echo "🔍 Verifying image in GCR..."
          
          # List images to verify
          gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }} \
            --filter="tags:${{ github.event.inputs.image_tag }}" \
            --format="table(digest,tags,timestamp)"
          
          echo "✅ Image verified in GCR"

      - name: Cleanup local images
        run: |
          echo "🧹 Cleaning up local images..."
          docker rmi ${{ github.event.inputs.jfrog_image_url }} || true
          docker rmi ${{ steps.transfer.outputs.gcr_image_url }} || true
          docker system prune -f

      - name: Transfer summary
        run: |
          echo "🎉 Stage 2 Complete - JFrog to GCR Transfer"
          echo "📦 Source: ${{ github.event.inputs.jfrog_image_url }}"
          echo "📦 Target: ${{ steps.transfer.outputs.gcr_image_url }}"
          echo "🌍 Environment: ${{ github.event.inputs.environment }}"

  # Trigger Stage 3 - Deploy to Cloud Run
  trigger-cloud-run-deployment:
    name: Trigger Cloud Run Deployment
    runs-on: ubuntu-latest
    needs: transfer-jfrog-to-gcr
    if: success()
    
    steps:
      - name: Trigger Stage 3 Workflow
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'stage3-deploy-cloud-run.yml',
              ref: '${{ github.ref_name }}',
              inputs: {
                gcr_image_url: '${{ needs.transfer-jfrog-to-gcr.outputs.gcr_image_url }}',
                image_tag: '${{ github.event.inputs.image_tag }}',
                environment: '${{ github.event.inputs.environment }}',
                service_name: '${{ needs.transfer-jfrog-to-gcr.outputs.service_name }}',
                triggered_by: 'stage2-jfrog-to-gcr',
                source_commit: '${{ github.event.inputs.source_commit }}'
              }
            });
            
            console.log('✅ Triggered Stage 3 workflow:', response.status);
            console.log('🎯 Deployment inputs:');
            console.log('  - GCR Image:', '${{ needs.transfer-jfrog-to-gcr.outputs.gcr_image_url }}');
            console.log('  - Service:', '${{ needs.transfer-jfrog-to-gcr.outputs.service_name }}');
            console.log('  - Environment:', '${{ github.event.inputs.environment }}');

      - name: Workflow summary
        run: |
          echo "🚀 Stage 2 Complete - JFrog to GCR Transfer"
          echo "📦 GCR Image: ${{ needs.transfer-jfrog-to-gcr.outputs.gcr_image_url }}"
          echo "🎯 Triggered Stage 3: Cloud Run Deployment"
          echo "⏭️ Next: Application will be deployed to Cloud Run"
