name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GCP_PROJECT_ID: gifted-palace-468618-q5
  GCP_PROJECT_NUMBER: 283962084457
  JFROG_URL: trial4jlj6w.jfrog.io
  IMAGE_NAME: web-application
  CLOUD_RUN_SERVICE: web-application-service
  CLOUD_RUN_REGION: us-central1

jobs:
  # Stage 1: Code Quality & Testing
  code-quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint --if-present

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Security audit
        run: npm audit --audit-level=high

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

  # Stage 2: Build & Package
  build-and-push:
    name: Build & Push to JFrog
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate image tag
        id: image-tag
        run: |
          TAG="${{ env.JFROG_URL }}/shirish-docker/${{ env.IMAGE_NAME }}:${{ github.run_number }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Generated image tag: $TAG"

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: https://${{ env.JFROG_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Build and push Docker image
        id: build
        env:
          IMAGE_TAG: ${{ steps.image-tag.outputs.tag }}
        run: |
          # Build with build info collection
          jf docker build -t $IMAGE_TAG .
          
          # Push to JFrog
          jf docker push $IMAGE_TAG
          
          # Get image digest
          DIGEST=$(jf docker inspect $IMAGE_TAG | jq -r '.config.digest // empty')
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Publish build info
        env:
          JFROG_CLI_BUILD_NAME: web-application-build
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
        run: |
          jf rt build-collect-env
          jf rt build-add-git
          jf rt build-publish

      - name: Security scan with JFrog Xray
        run: |
          jf build-scan web-application-build ${{ github.run_number }}

  # Stage 3: Deploy to GCP Cloud Run
  deploy-to-gcp:
    name: Deploy to GCP Cloud Run
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker

      - name: Setup JFrog CLI for image pull
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: https://${{ env.JFROG_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Pull and retag image for GCR
        env:
          JFROG_IMAGE: ${{ needs.build-and-push.outputs.image-tag }}
          GCR_IMAGE: gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
        run: |
          # Pull from JFrog
          jf docker pull $JFROG_IMAGE
          
          # Tag for GCR
          docker tag $JFROG_IMAGE $GCR_IMAGE
          
          # Push to GCR
          docker push $GCR_IMAGE

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy ${{ env.CLOUD_RUN_SERVICE }} \
            --image=gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.run_number }} \
            --platform=managed \
            --region=${{ env.CLOUD_RUN_REGION }} \
            --allow-unauthenticated \
            --port=80 \
            --memory=512Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars="NODE_ENV=production" \
            --project=${{ env.GCP_PROJECT_ID }}
          
          # Get service URL
          URL=$(gcloud run services describe ${{ env.CLOUD_RUN_SERVICE }} \
            --region=${{ env.CLOUD_RUN_REGION }} \
            --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Application deployed to: $URL"

      - name: Health check
        run: |
          URL="${{ steps.deploy.outputs.url }}"
          echo "Performing health check on $URL"
          
          # Wait for deployment to be ready
          sleep 30
          
          # Health check
          if curl -f -s "$URL" > /dev/null; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            exit 1
          fi

  # Stage 4: Post-deployment
  post-deployment:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-to-gcp]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-to-gcp.result }}" == "success" ]; then
            echo "🚀 Deployment successful!"
            echo "Application URL: ${{ needs.deploy-to-gcp.outputs.url }}"
          else
            echo "❌ Deployment failed!"
          fi

      - name: Update deployment metadata
        if: needs.deploy-to-gcp.result == 'success'
        run: |
          echo "Recording deployment metadata..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          echo "Build Number: ${{ github.run_number }}"
          echo "Commit SHA: ${{ github.sha }}"
