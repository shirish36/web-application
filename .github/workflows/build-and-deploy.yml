name: Build and Deploy with Terraform

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      infrastructure_deployed:
        description: 'Infrastructure already deployed'
        required: false
        default: 'false'
        type: string

env:
  GCP_PROJECT_ID: gifted-palace-468618-q5
  JFROG_URL: trial4jlj6w.jfrog.io
  DOCKER_REPO: shirish-docker
  IMAGE_NAME: web-application

jobs:
  # Determine environment based on branch or input
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy_infra: ${{ steps.env.outputs.should_deploy_infra }}
    steps:
      - name: Determine Environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            SHOULD_DEPLOY_INFRA="${{ github.event.inputs.infrastructure_deployed != 'true' }}"
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            ENVIRONMENT="production"
            SHOULD_DEPLOY_INFRA="true"
          elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            ENVIRONMENT="staging"
            SHOULD_DEPLOY_INFRA="true"
          else
            ENVIRONMENT="development"
            SHOULD_DEPLOY_INFRA="true"
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "should_deploy_infra=$SHOULD_DEPLOY_INFRA" >> $GITHUB_OUTPUT
          echo "🎯 Environment: $ENVIRONMENT"

  # Code Quality and Testing
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint --if-present

      - name: TypeScript check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm test -- --coverage --watchAll=false --passWithNoTests

      - name: Security audit
        run: npm audit --audit-level=moderate

  # Deploy Infrastructure if needed
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [setup, quality-gates]
    if: needs.setup.outputs.should_deploy_infra == 'true'
    outputs:
      service_url: ${{ steps.trigger.outputs.service_url }}
    steps:
      - name: Trigger Infrastructure Deployment
        id: trigger
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.INFRA_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const response = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: 'terraform-infrastructure',
              workflow_id: 'terraform-apply.yml',
              ref: 'main',
              inputs: {
                environment: '${{ needs.setup.outputs.environment }}',
                destroy: 'false'
              }
            });
            
            console.log('Infrastructure deployment triggered:', response.status);
            
            // Wait for infrastructure deployment to complete
            // This is a simplified approach - in production, you might want to poll the workflow status
            await new Promise(resolve => setTimeout(resolve, 300000)); // Wait 5 minutes

  # Build and Push Application using Cloud Build (triggered by Terraform)
  build-application:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [setup, quality-gates, deploy-infrastructure]
    if: always() && needs.quality-gates.result == 'success'
    environment:
      name: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Trigger Cloud Build
        id: build
        run: |
          # Submit build to Cloud Build (this will use the Terraform-managed build trigger)
          BUILD_ID=$(gcloud builds submit . \
            --config=cloudbuild.yaml \
            --substitutions=_PROJECT_NAME=${{ env.IMAGE_NAME }},_ENVIRONMENT=${{ needs.setup.outputs.environment }},_JFROG_URL=${{ env.JFROG_URL }},_DOCKER_REPO=${{ env.DOCKER_REPO }} \
            --format="value(id)")
          
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "🔨 Build ID: $BUILD_ID"
          
          # Wait for build to complete
          gcloud builds log $BUILD_ID --stream

      - name: Get build results
        run: |
          BUILD_STATUS=$(gcloud builds describe ${{ steps.build.outputs.build_id }} --format="value(status)")
          if [ "$BUILD_STATUS" != "SUCCESS" ]; then
            echo "❌ Build failed with status: $BUILD_STATUS"
            exit 1
          else
            echo "✅ Build completed successfully"
          fi

  # Deploy Application to Cloud Run
  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [setup, build-application]
    if: success()
    environment:
      name: ${{ needs.setup.outputs.environment }}
    outputs:
      service_url: ${{ steps.deploy.outputs.service_url }}
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          SERVICE_NAME="${{ env.IMAGE_NAME }}-${{ needs.setup.outputs.environment }}"
          IMAGE_URL="gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}"
          
          # Update Cloud Run service with new image
          gcloud run services update $SERVICE_NAME \
            --image=$IMAGE_URL \
            --region=us-central1 \
            --platform=managed
          
          # Get service URL
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
            --region=us-central1 \
            --format='value(status.url)')
          
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "🚀 Deployed to: $SERVICE_URL"

      - name: Health Check
        run: |
          SERVICE_URL="${{ steps.deploy.outputs.service_url }}"
          echo "🏥 Performing health check on $SERVICE_URL"
          
          # Wait for deployment to be ready
          sleep 30
          
          # Health check with retries
          for i in {1..5}; do
            if curl -f -s "$SERVICE_URL" > /dev/null; then
              echo "✅ Health check passed (attempt $i)"
              break
            else
              echo "⏳ Health check failed (attempt $i), retrying..."
              sleep 30
            fi
            
            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              exit 1
            fi
          done

  # Post-deployment notifications and cleanup
  post-deployment:
    name: Post Deployment
    runs-on: ubuntu-latest
    needs: [setup, deploy-application]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "📊 Deployment Summary"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Status: ${{ needs.deploy-application.result }}"
          if [ "${{ needs.deploy-application.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "🌐 Application URL: ${{ needs.deploy-application.outputs.service_url }}"
          else
            echo "❌ Deployment failed!"
          fi
          
          echo "📋 Build Information:"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Build Number: ${{ github.run_number }}"
          echo "Triggered by: ${{ github.actor }}"

      - name: Update deployment metadata
        if: needs.deploy-application.result == 'success'
        run: |
          echo "📝 Recording deployment metadata..."
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Service URL: ${{ needs.deploy-application.outputs.service_url }}"
          echo "Image Tag: ${{ github.run_number }}"
          echo "Deployment Time: $(date -u)"
